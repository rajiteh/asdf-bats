#!/usr/bin/env bash

set -e
set -o pipefail

export LATEST_BATS_VERSION="v1.2.0"

__dirname="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
toolname="$(basename "$(dirname "${__dirname}")")"
readonly __dirname
readonly toolname

declare -A toolnames
toolnames["bats"]="bats-core/bats-core"
toolnames["bats-assert"]="ztombol/bats-assert"
toolnames["bats-support"]="ztombol/bats-support"
toolnames["bats-mock"]="rajiteh/bats-mock"

fail() {
  echo -e "\e[31mFail:\e[m $*"
  exit 1
}

# return fullpath to temporary folder
download_bats() {
  local version=$1
  local download_path=$2
  local repo_url=$3

  (
    echo "* Downloading ${toolname}(version:$version) to $download_path"
    git clone --depth=1 -b "v$version" "$repo_url" "$download_path" >/dev/null

    echo "Download successful."
    return 0
  ) || (
    fail "An error occured during download - check if $version exists"
  )
}

version=${1:-"$ASDF_INSTALL_VERSION"}
if [[ -z "$version" ]] ; then
  fail "Version is missing - specify 1st param or set \$ASDF_INSTALL_VERSION"
fi

download_path=${2:-"$ASDF_DOWNLOAD_PATH"}
if [[ -z "$download_path" ]] ; then
  fail "Download path is missing - specify 2nd param or set \$ASDF_DOWNLOAD_PATH"
fi

repo_url=${3:-"$DEFAULT_BATS_REPO"}
if [[ -z "$repo_url" ]] ; then
  fail "repo_url is missing - specify 3rd param"
fi
repo_url="https://github.com/${toolnames[$toolname]}.git"


echo "Preparing downloading $version from $repo_url"
download_bats "$version" "$download_path" "$repo_url"
